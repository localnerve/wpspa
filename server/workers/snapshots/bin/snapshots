#!/usr/bin/env node

/**
 * The html snapshots worker process.
 * This takes the html snapshots and updates the snapshots hash in redis.
 *   process.env.NODE_ENV must be defined
 */
var path = require("path");
var fs = require("fs");
var configLib = require("../../../config");
var redis = require("../../../helpers/redis");
var snapshots = require("../lib");

// Get the configuration
var config = configLib.create(process.env.NODE_ENV);

// Get the normalized path to the app root
var appRoot = path.join(__dirname, "../../../../");

// Actions to perform on error
function errorAction(message) {
  console.error(message);
  // TODO: add SENDGRID or other email notification here
}

// Take snapshots driven from robots.txt and put into redis
var result = snapshots.robots(appRoot,
  function(nonError, completedSnapshots) {
    if (typeof nonError === "undefined" && result) {

      if (completedSnapshots.length > 0) {
        console.log("succesfully created snapshots");

        // Make the reducer to form the key
        // Removes the appRoot and snapshotsDir from the path so the key
        //   is just the request url.
        var reducer = path.join(appRoot, config.snapshotsDir);

        // Make the snapshots hash.
        // The key is the app-relative path: "/snapshots/index.html"
        // The value is the html snapshot contents
        var hash = {};
        for (var i = 0; i < completedSnapshots.length; i++) {
          hash[completedSnapshots[i].replace(reducer, "")] =
            fs.readFileSync(completedSnapshots[i], { encoding: "utf8" });
        }

        // Update the htmlSnapshotsHash in Redis
        var redisClient = redis.client();
        redisClient.hmset(config.htmlSnapshotsHash, hash, function(err, res) {
          if (err) {
            errorAction("Redis hash update of "+config.htmlSnapshotsHash+" failed");
          } else {
            console.log("Redis hash update of "+config.htmlSnapshotsHash+" succeeded");
          }
          redisClient.quit();
        });
      } else {
        errorAction("Html snapshots took no snapshots");
      }
    } else {
      errorAction("Html Snapshots failed");
    }
  }
);