{
  "name": "check-types",
  "version": "0.6.4",
  "author": {
    "name": "Phil Booth",
    "email": "pmbooth@gmail.com"
  },
  "description": "A tiny library for checking types and throwing exceptions.",
  "contributors": [
    {
      "name": "Phil Booth",
      "email": "pmbooth@gmail.com"
    },
    {
      "name": "Rowan Manning"
    },
    {
      "name": "Forbes Lindesay"
    },
    {
      "name": "Fabrizio Moscon"
    }
  ],
  "main": "./src/check-types.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/philbooth/check-types.js"
  },
  "keywords": [
    "types",
    "type-checking",
    "duck-typing",
    "arguments",
    "parameters"
  ],
  "devDependencies": {
    "jake": "0.5.x",
    "jshint": "0.9.x",
    "mocha": "1.8.x",
    "chai": "1.5.x",
    "uglify-js": "2.2.x"
  },
  "license": "MIT",
  "scripts": {
    "test": "jake test"
  },
  "readme": "# check-types.js\n\n[![Build status][ci-image]][ci-status]\n\nA tiny JavaScript library for checking types and throwing exceptions.\n\n## Installation\n\n### Via NPM\n\n```\nnpm install check-types\n```\n\n### Via Jam\n\n```\njam install check-types\n```\n\n### Via Git\n\n```\ngit clone git@github.com:philbooth/check-types.js.git\n```\n\n## Usage\n\n### Loading the library\n\nBoth\nCommonJS\n(e.g.\nif you're running on [Node.js][node]\nor in the browser with [Browserify])\nand AMD\n(e.g. if you're using [Require.js][require])\nloading styles are supported.\nIf neither system is detected,\nthe library defaults to\nexporting its interface globally\nas `check`.\n\n### Calling the exported functions\n\nA number of different functions are exported:\n\n#### check.quacksLike (thing, duck)\n\nTests whether an object 'quacks like a duck'.\nReturns `true`\nif the first argument has all of the properties\nof the second, archetypal argument (the 'duck').\nReturns `false` otherwise.\nIf either argument is not an object,\nan exception is thrown.\n\n#### check.verifyQuack (thing, duck, message)\n\nThrows an exception\nif an object does not 'quack like a duck'.\n\n#### check.isInstance (thing, prototype)\n\nReturns `true` if an object is an instance of a prototype,\n`false` otherwise.\n\n#### check.verifyInstance (thing, prototype, message)\n\nThrows an exception if an object is not an instance of a prototype.\n\n#### check.isEmptyObject (thing)\n\nReturns `true` if something is an empty, non-null, non-array object,\n`false` otherwise.\n\n#### check.verifyEmptyObject (thing, message)\n\nThrows an exception unless something is an empty, non-null, non-array object.\n\n#### check.isObject (thing)\n\nReturns `true` if something is a non-null, non-array object,\n`false` otherwise.\n\n#### check.verifyObject (thing, message)\n\nThrows an exception unless something is a non-null, non-array object.\n\n#### check.isLength (thing, length)\n\nReturns `true` if something has a length property\nthat matches the specified length,\n`false` otherwise.\n\n#### check.verifyLength (thing, length, message)\n\nThrows an exception unless something has a length property\nmatching the specified length.\n\n#### check.isArray (thing)\n\nReturns `true` something is an array,\n`false` otherwise.\n\n#### check.verifyArray (thing, message)\n\nThrows an exception unless something is an array.\n\n#### check.isFunction (thing)\n\nReturns `true` if something is function,\n`false` otherwise.\n\n#### check.verifyFunction (thing, message)\n\nThrows an exception unless something is function.\n\n#### check.isUnemptyString (thing)\n\nReturns `true` if something is a non-empty string,\n`false` otherwise.\n\n#### check.verifyUnemptyString (thing, message)\n\nThrows an exception unless something is a non-empty string.\n\n#### check.isString (thing)\n\nReturns `true` if something is a string,\n`false` otherwise.\n\n#### check.verifyString (thing, message)\n\nThrows an exception unless something is a string.\n\n#### check.isPositiveNumber (thing)\n\nReturns `true` if something is a number\ngreater than zero,\n`false` otherwise.\n\n#### check.verifyPositiveNumber (thing, message)\n\nThrows an exception unless something is a number\ngreater than zero.\n\n#### check.isNegativeNumber (thing)\n\nReturns `true` if something is a number\nless than zero,\n`false` otherwise.\n\n#### check.verifyNegativeNumber (thing, message)\n\nThrows an exception unless something is a number\nless than zero.\n\n#### check.isEvenNumber (thing)\n\nReturns `true` if something is an even number,\n`false` otherwise.\n\n#### check.verifyEvenNumber (thing, message)\n\nThrows an exception unless something is an even number.\n\n#### check.isOddNumber (thing)\n\nReturns `true` if something is an even number,\n`false` otherwise.\n\n#### check.verifyOddNumber (thing, message)\n\nThrows an exception unless something is an even number.\n\n#### check.isNumber (thing)\n\nReturns `true` if something is a number,\n`false` otherwise.\nIn this case, `NaN` is not considered a number.\n\n#### check.verifyNumber (thing, message)\n\nThrows an exception unless something is a number.\nIn this case, `NaN` is not considered a number.\n\n## Development\n\n### Dependencies\n\nThe build environment relies on\nNode.js,\n[NPM],\n[Jake],\n[JSHint],\n[Mocha],\n[Chai] and\n[UglifyJS].\nAssuming that you already have Node.js and NPM set up,\nyou just need to run `npm install` to\ninstall all of the dependencies as listed in `package.json`.\n\n### Unit tests\n\nThe unit tests are in `test/check-types.js`.\nYou can run them with the command `npm test` or `jake test`.\nTo run the tests in a web browser,\nopen `test/check-types.html`.\n\n[ci-image]: https://secure.travis-ci.org/philbooth/check-types.js.png?branch=master\n[ci-status]: http://travis-ci.org/#!/philbooth/check-types.js\n[node]: http://nodejs.org/\n[browserify]: http://browserify.org/\n[require]: http://requirejs.org/\n[npm]: https://npmjs.org/\n[jake]: https://github.com/mde/jake\n[jshint]: https://github.com/jshint/node-jshint\n[mocha]: http://visionmedia.github.com/mocha\n[chai]: http://chaijs.com/\n[uglifyjs]: https://github.com/mishoo/UglifyJS\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/philbooth/check-types.js/issues"
  },
  "_id": "check-types@0.6.4",
  "dist": {
    "shasum": "300f1f42e0be656ed4d84b3a39dbbf81a684a251"
  },
  "_from": "check-types@0.6.x",
  "_resolved": "https://registry.npmjs.org/check-types/-/check-types-0.6.4.tgz"
}
