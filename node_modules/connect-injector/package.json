{
  "name": "connect-injector",
  "description": "A middleware to inject content into any HTTP response.",
  "version": "0.2.3",
  "homepage": "https://github.com/daffl/connect-injector",
  "author": {
    "name": "David Luecke",
    "email": "daff@neyeon.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/daffl/connect-injector.git"
  },
  "bugs": {
    "url": "https://github.com/daffl/connect-injector/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/daffl/connect-injector/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/connect-injector",
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "connect": ">= 2.7.2",
    "underscore": ">= 1.4.4",
    "async": ">= 0.2.5",
    "stream-buffers": ">= 0.2.3",
    "uberproto": "~1.1.0"
  },
  "devDependencies": {
    "should": "1.2.1",
    "request": "2.12.0",
    "http-proxy": "*",
    "mocha": "1.8.1",
    "grunt": "~0.4.1",
    "grunt-release": "~0.3.5"
  },
  "scripts": {
    "test": "mocha test/"
  },
  "keywords": [
    "connect",
    "middleware",
    "http"
  ],
  "readme": "# connect-injector\n\nA middleware to inject content into any HTTP response.\n\n[![Build Status](https://travis-ci.org/daffl/connect-injector.png?branch=master)](https://travis-ci.org/daffl/connect-injector)\n\n## Getting Started\n\nInstall the module with: `npm install connect-injector`\n\n## Injecting\n\nThe basic API looks like this:\n\n```javascript\nvar inject = require('connect-injector');\n\ninject(function when(req, res) {\n  // for this request and repsonse\n  // return whether or not to enable injecting\n}, function converter(callback, content, req, res) {\n  callback // (error, data) with the injected data\n  content // the entire response buffer\n});\n```\n\n## Examples\n\n### JSONP support\n\nA very useful example for connect-inject is to add [JSONP](http://en.wikipedia.org/wiki/JSONP)\nsupport to any `application/json` repsonse:\n\n```javascript\nvar inject = injector(function(req, res) {\n  var isJSON = res.getHeader('content-type').indexOf('application/json') !== -1;\n  return isJSON && req.query.callback;\n}, function(callback, data, req, res) {\n  callback(null, req.query.callback + '(' + data.toString() + ')');\n});\n\n// inject needs to be used before any middleware that writes to the response\nconnect().use(connect.query()).use(inject).use(/* your other middleware here */);\n```\n\nNow any `application/json` response will be wrapped into a callback if given the\n`callback=xyz` query parameter.\n\n## Release History\n\n__0.2.3__\n\n- Fix caching issues for response headers not being written if there is no body ([#3](https://github.com/daffl/connect-injector/issues/3))\n\n__0.2.2__\n\n- Fix handling of responses with an empty body ([#1](https://github.com/daffl/connect-injector/pull/1))\n\n__0.2.1__\n\n- Fix bug not setting `isIntercepted` properly\n\n__0.2.0__\n\n- Allow chaining injectors\n- Unit tests and CI\n- Fixes for writing correct headers\n- Use [stream-buffers](https://github.com/samcday/node-stream-buffer) instead of concatenating\n\n__0.1.0__\n\n- Initial alpha release\n\n## License\n\nCopyright (c) 2013 David Luecke  \nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "connect-injector@0.2.3",
  "_from": "connect-injector@~0.2.2"
}
